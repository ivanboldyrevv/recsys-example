services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    container_name: recsys.zookeeper
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
                  
  kafka1:
    image: confluentinc/cp-enterprise-kafka:5.1.2
    container_name: recsys.kafka1
    depends_on:
      - zookeeper
    ports:
    # Exposes 29092 for external connections to the broker
    # Use kafka1:9092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991
      
      
  schemaregistry:
    image: confluentinc/cp-schema-registry:6.2.1
    container_name: recsys.schemaregistry
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - 8085:8085
  
  redis:
    image: redis:latest
    container_name: recsys-redis
    restart: unless-stopped
    ports:
        - "6379:6379"
  
  postgres:
    image: postgres:latest
    container_name: recsys.postgres
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
  
  reco-service:
    build: /reco-service
    container_name: recsys.recommendation-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db

      BROKER_HOST: kafka1
      BROKER_PORT: 9092
      BROKER_TOPIC: item_sequence

      SCHEMAREGISTRY_HOST: schemaregistry
      SCHEMAREGISTRY_PORT: 8085

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    ports:
      - 8000:8000
    depends_on:
      - redis
      - kafka1
      - schemaregistry
    volumes:
      - ./reco-service/src:/app
  
  model:
    build: /bert4rec
    container_name: recsys.model
    environment:
      # MODEL_NAME: BERT4Rec-Dec-29-2024_20-09-40
      # MODEL_NAME: BERT4Rec-Jan-13-2025_19-40-33
      MODEL_NAME: BERT4Rec-Jan-13-2025_16-19-54

      BROKER_HOST: kafka1
      BROKER_PORT: 9092
      BROKER_TOPIC: item_sequence

      SCHEMAREGISTRY_HOST: schemaregistry
      SCHEMAREGISTRY_PORT: 8085

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    ports:
      - 8200:8000
    depends_on:
      - reco-service
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./bert4rec:/app
  
  frontend:
    build: /frontend/my-app
    container_name: recsys.frontend
    ports:
      - 80:80
    environment:
      NODE_ENV: production

volumes:
  pgdata:
    driver: local
  bert4rec:
  reco-service: